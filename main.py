import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram import types

# Set up logging
logging.basicConfig(level=logging.INFO)

# Set up the bot and dispatcher
bot = Bot(token="6267875289:AAEYLSp4hC8UcLm_d2qtm94g1zwPC1tEU7M")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# Define the welcome message
async def send_welcome(message: types.Message):
    await message.reply("–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç ‚úãüëã , –∑–∞–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—â–∏ —Å –ø–æ–π–∑–æ–Ω–∞ –ø–æ –Ω–∏–∑–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–µ.–ù—É–∂–Ω—ã –∫—Ä–æ—Å—Å–æ–≤–∫–∏, –º–∞–π–∫–∏ –∏ "
                        "—Ç–¥.- –ø–∏—à–∏ –Ω–∞–º, –≤—Å—ë —Ä–∞—Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –±—ã —É–±–µ–¥–∏—Ç—Å—è —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∫–∞–º –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ "
                        "–∞–≤–∏—Ç–æ.–°–µ–π—á–∞—Å –∫—É—Ä—Å 11,5 , —Ü–µ–Ω–∞ –∑–∞ –Ω–∞—à—É —É—Å–ª—É–≥—É —É–∫–∞–∑–∞–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í–µ—â–∏ –∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 3-4 "
                        "–Ω–µ–¥–µ–ª—å.")


# Define the main menu keyboard
main_menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
profile_button = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
help_button = types.KeyboardButton("–ü–æ–º–æ—â—å")
my_orders_button = types.KeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
create_order_button = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
main_menu_keyboard.add(profile_button, help_button, my_orders_button, create_order_button)


# Define the state machine for creating an order
class CreateOrderStates(StatesGroup):
    get_order_name = State()
    get_order_description = State()


# Define the handler for the /start command
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await send_welcome(message)
    await message.reply("–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑."
                        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–ø–æ–º–æ—â—å', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å",
                        reply_markup=main_menu_keyboard)


# Define the handler for the "Profile" button
@dp.message_handler(Text(equals="–ü—Ä–æ—Ñ–∏–ª—å"))
async def profile(message: types.Message):
    user = message.from_user
    username = user.username
    user_id = user.id
    profile_text = ("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n"
                    f"üîë –õ–æ–≥–∏–Ω: @{username}\n"
                    f"üí≥ ID: {user_id}\n"
                    "üíµ –ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É: 0 —Ä—É–±\n"
                    "üè¶ –ë–∞–ª–∞–Ω—Å: 0 —Ä—É–±.\n"
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
    await message.answer(profile_text)


# Define the handler for the "Help" button
@dp.message_handler(Text(equals="–ü–æ–º–æ—â—å"))
async def help(message: types.Message):
    await message.reply("–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: "
                        "–∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ poizon , –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–≤–∞—Ä , —Å–∫–∏–¥—ã–≤–∞–µ—Ç–µ –Ω–∞–º –µ–≥–æ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫—É –∏ —Ä–∞–∑–º–µ—Ä, "
                        "–¥–∞–ª—å—à–µ –º—ã —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç, –∏ –æ—Ç —ç—Ç–æ–π —Å—É–º–º—ã –≤—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –≤ –Ω–∞—á–∞–ª–µ 30% , "
                        "–æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞ –∫ –Ω–∞–º –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞")
    await  message.reply("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @sickeryo")


# Define the handler for the "My Orders" button
@dp.message_handler(Text(equals="–ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
async def my_orders(message: types.Message):
    await message.reply("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:")


# Define the handler for the "Create an Order" button
@dp.message_handler(Text(equals="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"))
async def create_order(message: types.Message):
    await message.reply("–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –∑–∞–∫–∞–∑? –ï–≥–æ –∏–º—è –±—É–¥–µ—Ç–µ –∑–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã")
    await CreateOrderStates.get_order_name.set()


# Define the handler for the order name
@dp.message_handler(state=CreateOrderStates.get_order_name)
async def process_order_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['order_name'] = message.text

    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å –ü–æ–π–∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: –∏–¥–∏ –Ω–∞—Ö—É–π")
    await CreateOrderStates.get_order_description.set()


# Define the handler for the order description
@dp.message_handler(state=CreateOrderStates.get_order_description)
async def process_order_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['order_description'] = message.text

        # Do something with the order data, e.g. store it in a database
        order_name = data['order_name']
        order_description = data['order_description']
        await message.reply(f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {order_name} - {order_description}")

        # Reset the state machine
        await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
