import base64
import io

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, CallbackQuery, InputFile

from data import config
from filters import IsPrivate
from google_sheets import ORDERS, MAIN_DATA, USERS
from handlers.users.menu import menu
from keyboards.default import kb_return
from keyboards.default.yes_no import kb_yes_no

from loader import dp, bot

from states.calculate_shoes import CalculateShoes

from datetime import datetime


async def check_link(link):
    import re
    link_regex = r'^https:\/\/dw4\.co\/t\/[A-Z]\/[a-zA-Z0-9]+$'
    return re.match(link_regex, link)


async def create_an_order_number():
    import random
    num = random.randint(100000, 999999)
    if ORDERS.find(str(num)):
        print("–£–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑")
        return create_an_order_number()
    return num


@dp.message_handler(IsPrivate(), state=CalculateShoes.price)
async def get_shoes_price(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è":
        await state.finish()
        await menu(message)
        return

    if not answer.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ", reply_markup=kb_return)
        await CalculateShoes.price.set()
        return

    cource = MAIN_DATA.acell('A2').value
    com_shoes = MAIN_DATA.acell("B2").value
    com_service = MAIN_DATA.acell("D2").value
    balance = USERS.cell(USERS.find(str(message.from_user.id)).row, 4).value
    price = int(float(answer) * float(cource) + float(com_shoes) + float(com_service) - float(balance))
    await state.update_data(price=price)
    text = (f"üí∏–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>üí∏\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç:\n\n"
            f"<b>–ö—É—Ä—Å ¬•</b> - {MAIN_DATA.acell('A2').value}\n"
            "<b>–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—Ç–∞—é</b> - 0‚ÇΩ\n"
            f"<b>–î–æ—Å—Ç–∞–≤–∫–∞ –ö–∏—Ç–∞–π-–ú–æ—Å–∫–≤–∞</b> - {MAIN_DATA.acell('B2').value}‚ÇΩ\n"
            f"<b>–ö–æ–º–∏—Å—Å–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞</b> - {MAIN_DATA.acell('D2').value}‚ÇΩ")
    if int(balance) > 0:
        text += f"\n<b>–ü—Ä–æ–º–æ–∫–æ–¥</b> - {balance} ‚ÇΩ"
    await message.answer(text)
    await message.answer("–û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑?", reply_markup=kb_yes_no)
    await CalculateShoes.status.set()


@dp.message_handler(IsPrivate(), state=CalculateShoes.status)
async def get_shoes_status(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è":
        await state.finish()
        await menu(message)
        return

    await state.update_data(status=answer)
    if answer == "–î–∞ Ô∏è‚úÖ" or answer.lower() == "–¥–∞":
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞.\n"
                             "–û–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏, –µ—ë —Ü–≤–µ—Ç –∏ —Ä–∞–∑–º–µ—Ä\n"
                             "–ù–∞–ø—Ä–∏–º–µ—Ä, Asics gel kahana 8, 44, —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–µ", reply_markup=kb_return)
        await CalculateShoes.order_name.set()
    elif answer == "–ù–µ—Ç‚ùåÔ∏è" or answer.lower() == "–Ω–µ—Ç":
        await state.finish()
        await menu(message)
        return
    else:
        await message.answer("–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.",
                             reply_markup=kb_yes_no)
        await CalculateShoes.status.set()


@dp.message_handler(IsPrivate(), state=CalculateShoes.order_name)
async def get_shoes_order_name(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è":
        await state.finish()
        await menu(message)
        return

    await state.update_data(order_name=answer)
    text = "–ß—Ç–æ –ø–æ–∫—É–ø–∞–µ–º?\n" \
           "<b>–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å —Å–∞–π—Ç–∞ Poizon</b> üîó" \
           "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ"
    photo = InputFile("media/how_to_get_link.jpg")
    await dp.bot.send_photo(message.chat.id, photo=photo, caption=text, reply_markup=kb_return)
    await CalculateShoes.link.set()


@dp.message_handler(IsPrivate(), state=CalculateShoes.link)
async def get_shoes_link(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è":
        await state.finish()
        await menu(message)
        return
    if not await check_link(answer):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        await CalculateShoes.link.set()
        return
    await state.update_data(link=answer)
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ: –¢–æ–≤–∞—Ä, —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç"
    photo = InputFile("media/how_to_send_image.jpg")
    await dp.bot.send_photo(message.chat.id, photo=photo, caption=text, reply_markup=kb_return)
    await CalculateShoes.photo.set()


@dp.message_handler(IsPrivate(), state=CalculateShoes.photo, content_types=ContentType.PHOTO)
async def get_shoes_photo(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è":
        await state.finish()
        await menu(message)
        return
    if not message.photo:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.\n"
                             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ: –¢–æ–≤–∞—Ä, —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç.")
        await CalculateShoes.photo.set()
    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)

    data = await state.get_data()

    order_number = await create_an_order_number()
    user_id = message.from_user.id
    order_name = data.get("order_name")
    link = data.get("link")
    status = "—Å–æ–∑–¥–∞–Ω"
    price = data.get("price")
    photo = data.get("photo")
    now = datetime.now()
    formatted_date_time = now.strftime("%d-%m-%Y %H:%M")
    history_of_statuses = str(status) + "  " + str(formatted_date_time)

    ORDERS.append_row([order_number, user_id, order_name, link, status, price, photo, history_of_statuses])

    text = ""
    text += (f"#{order_number}\n"
             f"\t\t\t\t username:\t\t@{message.from_user.username}\n"
             f"\t\t\t\t –ù–∞–∑–≤–∞–Ω–∏–µ:\t\t{order_name}\n"
             f"\t\t\t\t –°—Ç–∞—Ç—É—Å:\t\t{status}\n"
             f"\t\t\t\t –°—Ç–æ–∏–º–æ—Å—Ç—å:\t\t{price} —Ä—É–±\n"
             f"\t\t\t\t –°—Å—ã–ª–∫–∞: \t\t{link}")
    await bot.send_message(473151013, f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (–æ–±—É–≤—å).\n{text}")

    await message.answer(f"–ó–∞–∫–∞–∑ #{order_number} —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω")
    number_of_orders = USERS.cell(USERS.find(str(message.from_user.id)).row, 3).value
    USERS.update_cell(USERS.find(str(message.from_user.id)).row, 3, str(int(number_of_orders) + 1))

    await menu(message)
    await state.finish()
